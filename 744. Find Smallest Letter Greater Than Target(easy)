/*
给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。
数组里字母的顺序是循环的。举个例子，如果目标字母target = 'z' 并且有序数组为 letters = ['a', 'b']，则答案返回 'a'。
示例:
输入:
letters = ["c", "f", "j"]
target = "a"
输出: "c"

输入:
letters = ["c", "f", "j"]
target = "c"
输出: "f"

输入:
letters = ["c", "f", "j"]
target = "d"
输出: "f"

输入:
letters = ["c", "f", "j"]
target = "g"
输出: "j"

输入:
letters = ["c", "f", "j"]
target = "j"
输出: "c"

输入:
letters = ["c", "f", "j"]
target = "k"
输出: "c"
*/

/*
思路：二分法遍历数组，寻找结束查找的条件，当查找到第一个字符时，如果比目标大，则返回第一个字符，当查找到最后一个字符时，如果比
目标字符小，则返回数组中最小的字符，也就是第一个字符，当查找的是中间的字符时，只要查找的字符小于等于目标字符，而查找的字符的后面
一个字符大于目标字符，则返回查找的字符的后一个字符
*/

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
       
        int l = 0;
        int r = letters.length;
        char res = letters[0];
        while(l < r){
            int m = l + (r - l) / 2;
            if(letters[m] <= target){
                if(m == letters.length - 1)break;
                else if(letters[m + 1] > target){
                    res = letters[m + 1];
                    break;
                }
                else{
                    l = m + 1;
                }
            }
            
            else {
                if(m == 0){
                  break;
                }
                else {
                    r = m;
                }
            }
        }
        return res;
    }
}
