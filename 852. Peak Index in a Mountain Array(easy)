/*
我们把符合下列属性的数组 A 称作山脉：
A.length >= 3
存在 0 < i < A.length - 1 使得A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
给定一个确定为山脉的数组，返回任何满足 A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1] 的 i 的值。

示例 1：
输入：[0,1,0]
输出：1

示例 2：
输入：[0,2,1,0]
输出：1
*/

/*
思路：利用二分法，先查找数组中间位置的数，如果比前面的大，则判断其是否比后面的大，是则为峰，否则说明峰在数组的后半部分，再查找数组的后半部分的中间
数，重复前面步骤；若查找的中间的数比前面的数小，则说明峰在数组的前半部分，再往前面部分的中间查找
*/

class Solution {
    public int peakIndexInMountainArray(int[] A) {
        int l = 0;
        int r = A.length - 1;
        while(l <= r){
            int m = (l + r) / 2;
            if(A[m] > A[m - 1]){
                if(A[m] > A[m + 1]){
                    r = m;
                    break;
                }
                else{
                    l = m + 1;
                }
            }
            
            else{
                r = m;
            }
        }
        
        return r;
    }
}
