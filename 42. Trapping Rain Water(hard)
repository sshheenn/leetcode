/*
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。
示例:
输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6
*/


/*
思路1：用一个数组分别记住每一个位置的左边的最大高度，然后用另一个数组记住每个位置的右边的最大高度，然后取左右高度中的最小值，
就是当前位置的最大容量，然后减去当前位置的高度，如果结果为正，则该结果为当前位置的真正乘雨量，若为负，此处容量为0
*/

class Solution {
    public int trap(int[] height) {
        int len = height.length;
        int[] maxL = new int[len];
        int[] maxR = new int[len];
        int res = 0;
        for(int i = 1; i < len; i++){
            maxL[i] = Math.max(maxL[i - 1],height[i -1]);
        }
        
        for(int i = len - 2; i >= 0 ; i --){
            maxR[i] = Math.max(maxR[i + 1], height[i + 1]);
        }
        
        for(int i = 0; i < len; i ++){
            int temp = Math.min(maxL[i],maxR[i]);
            res += Math.max(0,temp - height[i]);
        }
        return res;
    }
}


/*
思路2：双指针法，分别用两个变量指向数组的 第一个 元素和最后一个元素，然后用这两个变量分别记住从左遍历到左边当前位置的最大值
和从右边遍历到右边当前位置的最大值，当右边出现比左边的最大值大或相等时，可知左边当前位置的最大盛雨量的高度为左边最大值减去左边
当前位置的值，若左边出现比右边最大值还大的值时，可知右边当前位置的最大盛雨量的高度为右边最大值减去右边当前位置的值
*/

class Solution {
    public int trap(int[] height) {
    int left = 0;
        int right = height.length-1;
        int ret = 0;
        
        int lMax = 0;
        int rMax = 0;
       while (left < right)
       {
           lMax = Math.max(lMax,height[left]);
           rMax = Math.max(rMax,height[right]);
           
           if (lMax < rMax)
           {
               ret += lMax - height[left];
               left++;
           }
           else
           {
               ret += rMax - height[right];
               right--;
           }
       }
       
        return ret;
    }
}
