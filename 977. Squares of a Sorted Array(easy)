/*
给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。
示例 1：
输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：
输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
提示：
1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。
*/

/*
思路1：直接使数组的每个位置的值等于原来的平方，然后再进行排序
*/

class Solution {
    public int[] sortedSquares(int[] A) {
        for(int i = 0; i < A.length; i++){
            A[i] = A[i] * A[i];
        }
        
        Arrays.sort(A);
        return A;
    }
}


/*
思路2：先找出前面的负数的和后面整数的分界位置，然后从该位置为别向前遍历负数和向后遍历整数，然后比较当前遍历的正负位置的数的平方哪个小，
先把小的存进数组中，依次进行
*/

class Solution {
    public int[] sortedSquares(int[] A) {
        int len = A.length;
        int[] res = new int[len];
        int a = 0;
        for(int i = 0; i < len; i ++){
            if(A[i] < 0){
                a = i;
            }
            else {
                break;
            }
        }
        
        int l = a;
        int r = a + 1;
        int i = 0;
        
        while(l >= 0 && r < len){
            if(A[l]*A[l] > A[r]*A[r]){
                res[i ++] = A[r]*A[r];
                r ++;
            }
            
            else{
                res[i ++] = A[l]*A[l];
                l --; 
            }
        }
        
        while(l >= 0){
            res[i ++] = A[l]*A[l];
            l --;
        }
        
        while(r < len){
             res[i ++] = A[r]*A[r];
                r ++;
        }
        return res;
    }
}


/*
思路3：由负数越小平方值越大，正数越大平方值越大，可以定义双指针，分别指向数组的头和尾，然后比较它们的大小，
平方值大的先存到数组的后面
*/

class Solution {
    public int[] sortedSquares(int[] A) {
        int l = 0;
        int r = A.length - 1;
        int i = r;
        int[] res = new int[r + 1];
        while(l <= r){
            if(A[l] * A[l] > A[r] * A[r]){
                res[i --] = A[l] * A[l];
                l ++;
            }
            else {
                res[i --] = A[r] * A[r];
                r --;
            }
        }
        
        return res;
    }
}

