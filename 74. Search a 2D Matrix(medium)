/*
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true
示例 2:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false
*/

/*
思路一：从矩阵的左下角开始遍历，如果正在查找的数比目标数小，说明目标数只可能在本行的后面或不存在，只需在本行往右查找，
若正在查找的数比目标数大，则说明本行后面的数都比目标数大，无需再查找本行的数，则向上一行查找
*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
       int i = matrix.length - 1;
        if(i < 0) return false;
        int j = 0;
        int maxj = matrix[0].length;
        while(i >= 0 && j < maxj){
            if(matrix[i][j] == target){
                return true;
            }
            else if(matrix[i][j] > target){
                i --;
            }
            else if(matrix[i][j] < target){
                j ++;
            }
        }
        return false;
    }
}

/*
思路二：先用二分法找出目标数所在的行，再用二分法找出目标数所在的列
*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       int l = matrix.length;
        if(l == 0 || matrix[0].length == 0) return false;
        int r = matrix[0].length;
        if(matrix[0][0] > target || matrix[l - 1][r - 1] < target){
            return false;
        }
       int i = 0;
        int j = l - 1;
        while(i <= j){
            int m = i + (j - i) / 2;
            if(matrix[m][0] > target){
                j = m - 1;
            }
            
            else if(matrix[m][0] < target){
                if(matrix[m][r - 1] < target){
                    i = m + 1;
                }else{
                    i = m;
                    break;
                }
            }
            else{
                return true;
            } 
        }
        
        int left = 0;
        int right = r - 1;
        while(left <= right){
            int m = left + (right - left) / 2;
            if(matrix[i][m] == target){
                return true;
            }
            else if(matrix[i][m] < target){
                left = m + 1;
            }
            else{
                right = m - 1;
            }
        }
        return false;
    }
}
