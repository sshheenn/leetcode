/*
在歌曲列表中，第 i 首歌曲的持续时间为 time[i] 秒。
返回其总持续时间（以秒为单位）可被 60 整除的歌曲对的数量。形式上，我们希望索引的数字  i < j 且有 (time[i] + time[j]) % 60 == 0。

示例 1：
输入：[30,20,150,100,40]
输出：3
解释：这三对的总持续时间可被 60 整数：
(time[0] = 30, time[2] = 150): 总持续时间 180
(time[1] = 20, time[3] = 100): 总持续时间 120
(time[1] = 20, time[4] = 40): 总持续时间 60

示例 2：
输入：[60,60,60]
输出：3
解释：所有三对的总持续时间都是 120，可以被 60 整数。
 
提示：
1 <= time.length <= 60000
1 <= time[i] <= 500
*/

/*
思路1：暴力解法，用2个for循环直接两两匹配，判断它们的和是否为能整除60，但这种做法时间复杂度为n^2，不推荐使用
*/

class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int res = 0;
       for(int i = 0; i < time.length - 1; i++){
           for(int j = i + 1;  j < time.length; j ++){
               if((time[i] + time[j] ) % 60 == 0)
                   res ++;
           }
       } 
        return res;
    }
}

/*
思路2：根据一个整数除以60的余数只能为0到59，创建一个长度为60的数组，数组的坐标表示一个数除以60的余数，而数组存储
time目标数组中的每个数除以60的余数对应于创建的数组坐标的余数个数，我们可以知道1位置和59位置的数相加可以整除60，同理，
2和48、3和47......,需要注意的是，0位置只能和0位置的数，30位置的数只能和30位置的数相加整除60，所以这两个位置的对数都
是余数处于这两个位置的数的个数的握手次数，其余位置的对数为2个位置的余数个数相乘
*/

class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int[] re = new int[60];
        int count = 0;
        
        for(int i = 0; i < time.length; i ++){
            int a = time[i] % 60;
            re[a] ++;
        }
        
        count = re[0] * (re[0] - 1) / 2;
        for(int i = 1; i < 30; i ++){
            count += re[i] * re[60 - i];
        }
        
        count += re[30] * (re[30] - 1) / 2;
        return count;
    }
}

