/*
实现 int sqrt(int x) 函数。

计算并返回 x 的平方根，其中 x 是非负整数。

由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。

示例 1:

输入: 4
输出: 2
示例 2:

输入: 8
输出: 2
说明: 8 的平方根是 2.82842..., 
     由于返回类型是整数，小数部分将被舍去。
*/

/*
思路：利用二分法，因为会出现两个整数相乘越界的情况，所以不能用乘来判断，所以可以用除法来进行判断，只要找到答案所在区间的最小值和最最大值
的改变条件以及找到结束条件，也就是找到整数的平方根的条件，用二分法来查找了。

找到平方根的条件：查找区间的中间值m小于或等于x/m,并且m大于或等于x/(m+1);
查找区间最小值改变的条件：查找区间的中间值小于x/m并且m小于或等于x/(m+1)，即答案还在m的后面；
查找区间最大值改变的条件：查找区间的中间值m大于x/m，说明m过大，答案在m的左边

*/
class Solution {
    public int mySqrt(int x) {
        if(x == 0 || x == 1)return x;
        int l = 0;
        int r = x;
        while(l <= r){
            int m = l + (r - l)/2;
             
            if(x / m >= m && x / (m + 1) <= m){
                return m;
               
            }
            
            else if(x / m > m && x / (m + 1) >= m){
                l = m + 1;
            }
            
            else if(x / m < m){
                
                r = m - 1;
            }
        }
        
        return 0;
        
    }
}
