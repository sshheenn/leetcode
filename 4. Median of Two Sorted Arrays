/*
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5
*/

思路：中位数是处于一组排序数的中间位置的数的定义，而两个数组中的数已经都按升序排好了，
我们可以利用中位数的定义把两个数组中的数分成两部分，其中小的部分的最大值都比大的部分的
最小值小或相等，那么中位数就是小的部分的最大值或是大的部分的最小值或是二者的平均；

    我们可以将两个数组分别分成两部分，其中第一个数组的小的部分加上第二个数组的小的部分的个数应该
等于它们的大的部分的个数和，那么只要我们找到一个位置使得第一个数组小的部分的最大值小于或等于
第二个数组的大的部分的最小值，并且第二个数组的小的部分的最大值也小于或等于第一个数组的大的部分
的最大值的话，就成功地将两个数组的数分为了两部分


class Solution {
    public double findMedianSortedArrays(int[] A, int[] B) {
        
     int m = A.length;
        int n = B.length;
        if (m > n) { // to ensure m<=n
            int[] temp = A; A = B; B = temp;
            int tmp = m; m = n; n = tmp;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && B[j-1] > A[i]){
                iMin = i + 1; // i is too small
            }
            else if (i > iMin && A[i-1] > B[j]) {
                iMax = i - 1; // i is too big
            }
            else { // i is perfect
                int maxLeft = 0;
                if (i == 0) { maxLeft = B[j-1]; }
                else if (j == 0) { maxLeft = A[i-1]; }
                else { maxLeft = Math.max(A[i-1], B[j-1]); }
                if ( (m + n) % 2 == 1 ) { return maxLeft; }

                int minRight = 0;
                if (i == m) { minRight = B[j]; }
                else if (j == n) { minRight = A[i]; }
                else { minRight = Math.min(B[j], A[i]); }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;
    }
}
